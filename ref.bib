@article{Ritchie:1993:DCL:155360.155580,
 author = {Ritchie, Dennis M.},
 title = {The Development of the C Language},
 journal = {SIGPLAN Not.},
 issue_date = {March 1993},
 volume = {28},
 number = {3},
 month = mar,
 year = {1993},
 issn = {0362-1340},
 pages = {201--208},
 numpages = {8},
 url = {http://doi.acm.org.libproxy.york.ac.uk/10.1145/155360.155580},
 doi = {10.1145/155360.155580},
 acmid = {155580},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{cardelli1996type,
  title={Type systems},
  author={Cardelli, Luca},
  year={1996}
}

@article{Terei:2012:SH:2430532.2364524,
 author = {Terei, David and Marlow, Simon and Peyton Jones, Simon and Mazi\`{e}res, David},
 title = {Safe Haskell},
 journal = {SIGPLAN Not.},
 issue_date = {December 2012},
 volume = {47},
 number = {12},
 month = sep,
 year = {2012},
 issn = {0362-1340},
 pages = {137--148},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2430532.2364524},
 doi = {10.1145/2430532.2364524},
 acmid = {2364524},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {haskell, security, type safety},
} 

@article{Harper:1993:FDL:138027.138060,
 author = {Harper, Robert and Honsell, Furio and Plotkin, Gordon},
 title = {A Framework for Defining Logics},
 journal = {J. ACM},
 issue_date = {Jan. 1993},
 volume = {40},
 number = {1},
 month = jan,
 year = {1993},
 issn = {0004-5411},
 pages = {143--184},
 numpages = {42},
 url = {http://doi.acm.org/10.1145/138027.138060},
 doi = {10.1145/138027.138060},
 acmid = {138060},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {formal systems, interactive theorem proving, proof checking, typed lambda calculus},
} 

@article{Bentley:1986:PPL:6424.315691,
 author = {Bentley, Jon},
 title = {Programming Pearls: Little Languages},
 journal = {Commun. ACM},
 issue_date = {Aug. 1986},
 volume = {29},
 number = {8},
 month = aug,
 year = {1986},
 issn = {0001-0782},
 pages = {711--721},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/6424.315691},
 doi = {10.1145/6424.315691},
 acmid = {315691},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{van2000domain,
  title={Domain-specific languages: An annotated bibliography},
  author={Van Deursen, Arie and Klint, Paul and Visser, Joost},
  journal={ACM Sigplan Notices},
  volume={35},
  number={6},
  pages={26--36},
  year={2000},
  publisher={ACM}
}

@book{ranta2012implementing,
  title={Implementing programming languages. An introduction to compilers and interpreters},
  author={Ranta, Aarne},
  year={2012},
  publisher={College Publications}
}

@article{grimm2007typical,
  title={Typical: Taking the tedium out of typing},
  author={Grimm, Robert and Harris, Laune and Le, Anh},
  journal={Presentation at the IBM Programming Languages Day},
  year={2007}
}

@InProceedings{ruler,
author="Dijkstra, Atze
and Swierstra, S. Doaitse",
editor="Hagiya, Masami
and Wadler, Philip",
title="Ruler: Programming Type Rules",
booktitle="Functional and Logic Programming",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="30--46",
abstract="Some type systems are first described formally, to be sometimes followed by an implementation. Other type systems are first implemented as language extensions, to be sometimes retrofitted with a formal description. In neither case it is an easy task to keep both artefacts consistent. In this paper we introduce Ruler, a domain specific language for describing type rules. Type rules can be incrementally described, thus providing a means for building complex type systems on top of simpler ones. Besides checking well-formedness of Ruler programs we use them to generate (1) a visual LATEX rendering, suitable for use in the presentation of formal aspects, and (2) an attribute grammar based implementation. Combining these two aspects in Ruler contributes to bridging the gap between theory and practice: mutually consistent representations can be generated for use in both theoretical and practical settings.",
isbn="978-3-540-33439-2"
}

@article{Backus:1978:HFI:960118.808380,
 author = {Backus, John},
 title = {The History of FORTRAN I, II, and III},
 journal = {SIGPLAN Not.},
 issue_date = {August 1978},
 volume = {13},
 number = {8},
 month = aug,
 year = {1978},
 issn = {0362-1340},
 pages = {165--180},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/960118.808380},
 doi = {10.1145/960118.808380},
 acmid = {808380},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@Article{Backus1960,
author="Backus, J. W.
and Bauer, F. L.
and Green, J.
and Katz, C.
and McCarthy, J.
and Naur, P.
and Perlis, A. J.
and Rutishauser, H.
and Samelson, K.
and Vauquois, B.
and Wegstein, J. H.
and van Wijngaarden, A.
and Woodger, M.",
title="Report on the algorithmic language ALGOL 60",
journal="Numerische Mathematik",
year="1960",
month="Dec",
day="01",
volume="2",
number="1",
pages="106--136",
issn="0945-3245",
doi="10.1007/BF01386216",
url="https://doi.org/10.1007/BF01386216"
}

@book{aho2003compilers,
  title={Compilers: principles, techniques and tools (for Anna University), 2/e},
  author={Aho, Alfred V},
  year={2003},
  publisher={Pearson Education India}
}

@Book{prawitz2006natural,
 author = {Prawitz, Dag},
 title = {Natural deduction : a proof-theoretical study},
 publisher = {Dover Publications},
 year = {2006},
 address = {Mineola, N.Y},
 isbn = {0486446557}
 }

@article{barendregt_1991, 
 title={Introduction to generalized type systems}, 
 volume={1}, DOI={10.1017/S0956796800020025}, 
 number={2}, 
 journal={Journal of Functional Programming}, 
 publisher={Cambridge University Press}, 
 author={Barendregt, Henk}, 
 year={1991}, 
 pages={125–154}
 }

 @inproceedings{Andreae:2006:FIP:1167473.1167479,
 author = {Andreae, Chris and Noble, James and Markstrum, Shane and Millstein, Todd},
 title = {A Framework for Implementing Pluggable Type Systems},
 booktitle = {Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications},
 series = {OOPSLA '06},
 year = {2006},
 isbn = {1-59593-348-4},
 location = {Portland, Oregon, USA},
 pages = {57--74},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/1167473.1167479},
 doi = {10.1145/1167473.1167479},
 acmid = {1167479},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JavaCOP, pluggable type systems},
}

@inproceedings{Bracha2004PluggableTS,
  title={Pluggable Type Systems},
  author={Gilad Bracha},
  year={2004}
}

@article{Gray:1992:ECF:129630.129637,
 author = {Gray, Robert W. and Levi, Steven P. and Heuring, Vincent P. and Sloane, Anthony M. and Waite, William M.},
 title = {Eli: A Complete, Flexible Compiler Construction System},
 journal = {Commun. ACM},
 issue_date = {Feb. 1992},
 volume = {35},
 number = {2},
 month = feb,
 year = {1992},
 issn = {0001-0782},
 pages = {121--130},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/129630.129637},
 doi = {10.1145/129630.129637},
 acmid = {129637},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {compiler generators, language design, text processors},
} 

@book{Levine:2009:FB:1696439,
 author = {Levine, John and John, Levine},
 title = {Flex \& Bison},
 year = {2009},
 isbn = {0596155972, 9780596155971},
 edition = {1st},
 publisher = {O'Reilly Media, Inc.},
} 

@book{pierce2002types,
  title={Types and programming languages},
  author={Pierce, Benjamin C and Benjamin, C},
  year={2002},
  publisher={MIT press}
}

@inproceedings{wadler1995monads,
  title={Monads for functional programming},
  author={Wadler, Philip},
  booktitle={International School on Advanced Functional Programming},
  pages={24--52},
  year={1995},
  organization={Springer}
}

@misc{lions1996ariane,
  title={Ariane 5 flight 501 failure report by the inquiry board},
  author={Lions, Jacques-Louis and Luebeck, Lennart and Fauquembergue, Jean-Luc and Kahn, Gilles and Kubbat, Wolfgang and Levedag, Stefan and Mazzini, Leonardo and Merle, Didier and O’Halloran, Colin},
  year={1996},
  publisher={European space agency Paris}
}

@Article{Knuth1968,
author="Knuth, Donald E.",
title="Semantics of context-free languages",
journal="Mathematical systems theory",
year="1968",
month="Jun",
day="01",
volume="2",
number="2",
pages="127--145",
abstract="``Meaning'' may be assigned to a string in a context-free language by defining ``attributes'' of the symbols in a derivation tree for that string. The attributes can be defined by functions associated with each production in the grammar. This paper examines the implications of this process when some of the attributes are ``synthesized'', i.e., defined solely in terms of attributes of thedescendants of the corresponding nonterminal symbol, while other attributes are ``inherited'', i.e., defined in terms of attributes of theancestors of the nonterminal symbol. An algorithm is given which detects when such semantic rules could possibly lead to circular definition of some attributes. An example is given of a simple programming language defined with both inherited and synthesized attributes, and the method of definition is compared to other techniques for formal specification of semantics which have appeared in the literature.",
issn="1433-0490",
doi="10.1007/BF01692511",
url="https://doi.org/10.1007/BF01692511"
}

@article{gray1992eli,
  title={Eli: A complete, flexible compiler construction system},
  author={Gray, Robert W and Heuring, Vincent P and Levi, Steven P and Sloane, Anthony M and Waite, William M},
  journal={Communications of the ACM},
  volume={35},
  number={2},
  pages={121--132},
  year={1992},
  publisher={Association for Computing Machinery, Inc.}
}

@misc{marlow2004glasgow,
  title={The glasgow haskell compiler},
  author={Marlow, Simon and Jones, Simon Peyton and others},
  year={2004}
}

@article{Cardelli:1985:UTD:6041.6042,
 author = {Cardelli, Luca and Wegner, Peter},
 title = {On Understanding Types, Data Abstraction, and Polymorphism},
 journal = {ACM Comput. Surv.},
 issue_date = {Dec. 1985},
 volume = {17},
 number = {4},
 month = dec,
 year = {1985},
 issn = {0360-0300},
 pages = {471--523},
 numpages = {53},
 url = {http://doi.acm.org/10.1145/6041.6042},
 doi = {10.1145/6041.6042},
 acmid = {6042},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@book{milner1997definition,
  title={The definition of standard ML: revised},
  author={Milner, Robin and Tofte, Mads and Harper, Robert and MacQueen, David},
  year={1997},
  publisher={MIT press}
}

@book{kernighan2006c,
  title={The C programming language},
  author={Kernighan, Brian W and Ritchie, Dennis M},
  year={2006}
}

@article{MILNER1978348,
title = "A theory of type polymorphism in programming",
journal = "Journal of Computer and System Sciences",
volume = "17",
number = "3",
pages = "348 - 375",
year = "1978",
issn = "0022-0000",
doi = "https://doi.org/10.1016/0022-0000(78)90014-4",
url = "http://www.sciencedirect.com/science/article/pii/0022000078900144",
author = "Robin Milner",
abstract = "The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm W which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if W accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on W is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system."
}